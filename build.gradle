buildscript {
    repositories {
        maven {url "https://plugins.gradle.org/m2/"}
        maven {url "https://mvnrepository.com/artifact/"}
    }
    dependencies {
        classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.1")
        classpath  'org.yaml:snakeyaml:1.27'
    }
}
plugins {
    id 'org.hidetake.ssh' version '2.10.1'
    id "github.com.sakamotodesu.jcifs" version "0.2.2"
}

import org.yaml.snakeyaml.Yaml
import groovy.json.JsonBuilder
import static java.nio.file.Files.*
import static java.nio.file.Paths.*
import static java.nio.file.StandardCopyOption.*

group = 'com.platon.browser'
version = "${projectVersion}"

def yamlFilter = new FilenameFilter() {
    boolean accept(File dir, String name) {
        return name.endsWith(".yml")
    }
}
file("${projectDir.path}/docs/apidef").listFiles(yamlFilter).each { api ->
    file("${projectDir.path}/docs/apidef/${api.name}.json").write(new JsonBuilder(new Yaml().load(api.text.replace("_VERSION_","$projectVersion").replace("_BASE_PATH_","/browser-api"))).toString(),"utf-8")
}

file("${projectDir.path}/estpl").listFiles(yamlFilter).each { tpl ->
    copy(get(tpl.path), get("${projectDir.path}/browser-agent/src/main/resources/estpl").resolve(tpl.name), REPLACE_EXISTING)
    copy(get(tpl.path), get("${projectDir.path}/browser-service/src/test/resources/estpl").resolve(tpl.name), REPLACE_EXISTING)
}

def recursiveCopy(startDir,replaceDir){
    file(startDir).listFiles().each{conf ->
        if(conf.isDirectory()) {
            recursiveCopy(conf.path,replaceDir)
        }else{
            def classPathFile = file(conf.path.replace(replaceDir,'browser-api/build/resources/main/public'))
            def packagePathFile = file(conf.path.replace(replaceDir,'browser-api/build/package/public'))
            if(!classPathFile.exists()) classPathFile.parentFile.mkdirs()
            if(!packagePathFile.exists()) packagePathFile.parentFile.mkdirs()
            copy(get(conf.path), get(classPathFile.path), REPLACE_EXISTING)
            copy(get(conf.path), get(packagePathFile.path), REPLACE_EXISTING)
        }
    }
}
recursiveCopy('webconfig','webconfig')
recursiveCopy('docs','docs')

def scriptDir="${projectDir.path}/scripts/"
def resetTpl=file("${scriptDir}/reset.tpl.sh")
if(resetTpl.exists()){
    def desFile = file("${projectDir.path}/browser-agent/build/package/reset.sh")
    if(!desFile.exists()) desFile.parentFile.mkdirs()
    desFile.write(resetTpl.text
    .replace('_VERSION_',"$projectVersion")
    .replace('_PROFILE_',"dev")
    .replace('_DB_HOST_',"$dbHost")
    .replace('_DB_USER_',"$dbUser")
    .replace('_DB_PASS_',"$dbPass")
    ,"utf-8")
}
def startTpl=file("${scriptDir}/start.tpl.sh")
if(startTpl.exists()) {
    def desFile = file("${projectDir.path}/browser-agent/build/package/start.sh")
    if(!desFile.exists()) desFile.parentFile.mkdirs()
    desFile.write(startTpl.text.replace('_PROJECT_NAME_','browser-agent'),"utf-8")
    desFile = file("${projectDir.path}/browser-api/build/package/start.sh")
    if(!desFile.exists()) desFile.parentFile.mkdirs()
    desFile.write(startTpl.text.replace('_PROJECT_NAME_','browser-api'),"utf-8")
}
def stopTpl=file("${scriptDir}/stop.tpl.sh")
if(stopTpl.exists()) {
    def desFile = file("${projectDir.path}/browser-agent/build/package/stop.sh")
    if(!desFile.exists()) desFile.parentFile.mkdirs()
    desFile.write(stopTpl.text.replace('_PROJECT_NAME_','browser-agent'),"utf-8")
    desFile = file("${projectDir.path}/browser-api/build/package/stop.sh")
    if(!desFile.exists()) desFile.parentFile.mkdirs()
    desFile.write(stopTpl.text.replace('_PROJECT_NAME_','browser-api'),"utf-8")
}
def fullSql=file("${scriptDir}/${project.name}-${projectVersion}.all.sql")
if(fullSql.exists()) {
    copy(get(fullSql.path), get("${projectDir.path}/browser-agent/build/package").resolve(fullSql.name), REPLACE_EXISTING)
}
def upgradeSql=file("${scriptDir}/${project.name}-${projectVersion}.upgrade.sql")
if(upgradeSql.exists()) {
    copy(get(upgradeSql.path), get("${projectDir.path}/browser-agent/build/package").resolve(upgradeSql.name), REPLACE_EXISTING)
}

apply plugin: "org.sonarqube"

sonarqube {
    properties {
        property "sonar.sourceEncoding", "UTF-8"
    }
}

subprojects {
    def shortCommitId = 'git log -1 --pretty=%h'.execute([], project.rootDir).text.trim()

    // 设置编译器使用的编码
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

    apply plugin: 'java'
    apply plugin: 'jacoco'

    group 'com.platon.browser'
    version "$projectVersion-$shortCommitId"
    sourceCompatibility = '1.8'

    repositories {
        maven {url "http://maven.aliyun.com/nexus/content/groups/public/"}
        maven {url "https://sdk.platon.network/nexus/content/groups/public/"}
        mavenCentral()
    }

    dependencies {
        testCompile "junit:junit:$junitVersion"
        testCompile "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        compile "com.alibaba:fastjson:$fastJsonVersion"
        compile "org.apache.commons:commons-lang3:$commonLang3Version"
        compile "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        compile "commons-io:commons-io:$commonIoVersion"
        compile "redis.clients:jedis:$jedisVersion"
        testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.2'
        testCompile group: 'org.powermock', name: 'powermock-api-easymock', version: '2.0.2'
        testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.2'
        testCompile group: 'org.powermock', name: 'powermock-core', version: '2.0.2'

        compile ("org.elasticsearch.client:elasticsearch-rest-high-level-client:$elasticSearchVersion"){
            exclude module: 'elasticsearch'
            exclude module: 'elasticsearch-rest-client'
        }
        compile "org.elasticsearch:elasticsearch:$elasticSearchVersion"
        compile ("org.elasticsearch.client:elasticsearch-rest-client:$elasticSearchVersion"){
            exclude module: 'httpclient'
            exclude module: 'httpcore'
            exclude module: 'httpasyncclient'
            exclude module: 'httcore-nio'
        }
        compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.10'
        compile group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.12'
        compile group: 'org.apache.httpcomponents', name: 'httpasyncclient', version: '4.1.4'
        compile group: 'org.apache.httpcomponents', name: 'httpcore-nio', version: '4.4.12'

        compile group: 'org.springframework.retry', name: 'spring-retry', version: '1.2.4.RELEASE'
        testCompile group: 'org.hsqldb', name: 'hsqldb', version: '2.5.0'
        compile group: 'org.yaml', name: 'snakeyaml', version: '1.27'
        compile 'cn.hutool:hutool-all:5.5.7'
    }

    // 配置文件更新&生成
    def bootApps = ['browser-agent','browser-api','browser-export','browser-press','browser-sync']
    if(project.name in bootApps){
        def desc='通用配置: 请不要修改此文件，此文件由模板自动生成，若要修改，请移步至conftpl目录'
        def tplPath="${projectDir.path}/conftpl/"
        def mainRes="${projectDir.path}/src/main/resources/"
        def testRes="${projectDir.path}/src/test/resources/"
        def tpl = file(projectDir.path+"/conftpl/application.yml")
        if(tpl.exists()){
            def txt = tpl.text.replace('_VERSION_',"$projectVersion").replace('_DESCRIPTION_',desc)
            file("${mainRes}application.yml").write(txt,"utf-8")
            file("${testRes}application.yml").write(txt,"utf-8")
        }

        tpl = file("${tplPath}application-dev.yml")
        if(tpl.exists()){
            def txt = tpl.text.replace('_VERSION_',"$projectVersion").replace('_DESCRIPTION_',desc)
                    .replace('_DB_HOST_',"$dbHost")
                    .replace('_DB_PORT_',"$dbPort")
                    .replace('_DB_NAME_',"$dbName")
                    .replace('_DB_USER_',"$dbUser")
                    .replace('_DB_PASS_',"$dbPass")
                    .replace('_REDIS_IPS_',"$redisIps")
                    .replace('_REDIS_PWD_',"$redisPwd")
                    .replace('_REDIS_DB_',"$redisDb")
                    .replace('_ES_IPS_',"$esIps")
                    .replace('_ES_PORT_',"$esPort")
                    .replace('_ES_USER_',"$esUser")
                    .replace('_ES_PWD_',"$esPwd")
            file("${mainRes}application-dev.yml").write(txt,"utf-8")
            file("${testRes}application-dev.yml").write(txt,"utf-8")
        }
    }

    def releaseApps = ['browser-agent','browser-api']
    if(project.name in releaseApps){
        apply plugin: 'distribution' //打包tar包用到的插件
        // 复制配置文件
        task copyConf(type: Copy) {
            from('src/main/resources/application-prod.yml')
            from('jasypt.properties')
            from('status.hook')
            from('build/libs')
            into('build/package')
        }

        distributions {
            monitor {
                baseName = project.name
                contents {
                    from { 'build/package' }
                }
            }
        }

        monitorDistTar.dependsOn  'copyConf'
        monitorDistTar.compression = Compression.GZIP
        monitorDistTar.archiveExtension.set('tar.gz')

        task buildTar(dependsOn: [
                'build',
                copyConf
        ]){}

        remotes {
            webServer {
                host = "$deployServerHost"
                user = "$deployServerUser"
                port = Integer.parseInt("$deployServerPort")
                password = "$deployServerPassword"
            }
        }

        // 拷包到测试环境
        def packageName = "${project.name}-${version}"
        def deployDir = "$deployRootDir/${projectVersion}/${project.name}"
        def activeProfile = "$deployProfile"
        task copyToTestEnv(dependsOn:['buildTar'],group: 'deploy') {
            doLast {
                ssh.run {
                    session(remotes.webServer) {
                        execute "mkdir -p $deployDir/backup && mv $deployDir/${project.name}*.jar $deployDir/backup"
                        put from: "$buildDir/libs/${packageName}.jar", into: "$deployDir"
                        execute "cd $deployDir && nohup ./start.sh $activeProfile &"
                    }
                }
            }
        }

        def parentDir = project.name.contains('agent')?'scan-agent':'scan-api'
        def destDir = "${projectVersion}"+'-'+new Date().format("yyyy.MM.dd.HHmm")
        task copyToCifs(type: github.com.sakamotodesu.JcifsCopy,dependsOn:['buildTar'],group: 'deploy') {
            from "${projectDir.path}/build/distributions/${packageName}.tar.gz"
            into "smb://chendongming:CDM00juzix@192.168.21.210/proupdate/alaya/scan/${parentDir}/${destDir}/"
        }
    }

    //sonar扫描的路径
    sonarqube {
        properties {
            property "sonar.sources", "src/main/java"
        }
    }

    //jacoco测试报表的功能
    jacocoTestReport {
	    reports {
	        xml.enabled true
	        html.enabled true
	    }
	}

	jacocoTestCoverageVerification {
		violationRules {
			rule {
				limit {
					minimum = 0.7
				}
			}
		}
	 }

	check.dependsOn jacocoTestReport
}